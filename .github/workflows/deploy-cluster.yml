name: Deploy AKS Cluster

on:
  push:
      branches: [ "main" ]
    # paths:
    #   - '../../clusterclaim/azure-aks-official.yaml'

jobs:
  deploy-cluster:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Install Azure CLI
        run: |
          # Install Azure CLI
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Set Azure CLI Configuration
        run: az config set core.allow_broker=false


      # - name: Sample Azure action
      #   with: # Set Azure credentials secret as an input
      #     credentials: ${{ secrets.AZURE_CREDENTIALS }}
      #   env: # Or as an environment variable
      #     credentials: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Azure Login
      #   run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}


      # - name: Azure CLI Action
      #   uses: Azure/cli@v1.0.7
    
      - name: Set Up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

        
      - name: Az account show
        run: az account show


      - name: Set Azure Subscription
        run: az account set --subscription baf89069-e8f3-46f8-b74e-c146931ce7a4


      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group crossplane --name crossplane

      - name: Install kubectl
        run: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              sudo mv kubectl /usr/local/bin/
  
      - name: Set Up Crossplane Context
        run: |
          CROSSPLANE_CLUSTER_NAME=crossplane  # Update with your actual Crossplane cluster name
          CROSSPLANE_NAMESPACE=dev
          kubectl config set-context $CROSSPLANE_CLUSTER_NAME --namespace $CROSSPLANE_NAMESPACE
  
      - name: Install kubelogin
        run: |
          sudo snap install kubelogin
          # wget https://github.com/Azure/kubelogin/releases/download/v0.0.31/kubelogin-linux-amd64.zip
          # unzip kubelogin-linux-amd64.zip
          # # chmod +x kubelogin
          # # sudo mv kubelogin /usr/local/bin/


      - name: Authenticate using kubelogin
        run: |
            kubelogin convert-kubeconfig -l azurecli
  
      - name: Deploy Cluster Claim to Dev Namespace
        env:
          CLUSTER_CLAIM_FILE: clusterclaim/azure-aks-official.yaml
        run: |
            kubectl get ns
            kubectl apply -f "$CLUSTER_CLAIM_FILE" -n dev
  
        # - name: Wait for Cluster to Be Ready
        #   run: |
        #     CLUSTER_NAME=crossplane
        #     while [[ "$(az aks show --resource-group crossplane --name crossplane --query provisioningState -o tsv)" != "Succeeded" ]]; do
        #       echo "Waiting for the AKS cluster to become ready..."
        #       sleep 10
        #     done
  

  
  
  
  

      # - name: Create AKS Cluster and Wait for Ready State
      #   env:
      #     CLUSTER_CLAIM_FILE: clusterclaim/azure-aks-official.yaml
      #   run: |
      #     # Parse cluster claim file (modify as needed)
      #     # CLUSTER_NAME=$(cat "$CLUSTER_CLAIM_FILE" | jq -r .clusterName)
      #     # REGION=$(cat "$CLUSTER_CLAIM_FILE" | jq -r .region)
      #     # NODE_SIZE=$(cat "$CLUSTER_CLAIM_FILE" | jq -r .nodeSize)

      #     # # Use Azure CLI to create AKS cluster
      #     # az aks create --resource-group my-resource-group --name $CLUSTER_NAME --node-count 3 --node-vm-size $NODE_SIZE --location $REGION

      #     # # Wait for the AKS cluster to become ready (adjust timeout as needed)
      #     # while [[ "$(az aks show --resource-group my-resource-group --name $CLUSTER_NAME --query provisioningState -o tsv)" != "Succeeded" ]]; do
      #     #     echo "Waiting for the AKS cluster to become ready..."
      #     #     sleep 10
      #     # done

      #     # # Get AKS credentials
      #     # az aks get-credentials --resource-group my-resource-group --name $CLUSTER_NAME --admin

      #     # Read kubeconfig from the secret (modify as needed)
      #     KUBECONFIG_SECRET_NAME=$(cat "$CLUSTER_CLAIM_FILE" | jq -r .kubeconfigSecretName)
      #     KUBECONFIG=$(kubectl get secret $KUBECONFIG_SECRET_NAME -o jsonpath="{.data.kubeconfig}" | base64 --decode)

      #     # Write kubeconfig to a file (modify as needed)
      #     echo "$KUBECONFIG" > kubeconfig.yaml

      #     # Print kubeconfig file content (for demonstration purposes)
      #     cat kubeconfig.yaml

      # - name: Read and Print Kubeconfig
      #   id: read-kubeconfig
      #   run: |
      #       # Read kubeconfig from the secret (modify as needed)
      #       KUBECONFIG_SECRET_NAME=$(cat "$CLUSTER_CLAIM_FILE" | jq -r .kubeconfigSecretName)
      #       KUBECONFIG=$(kubectl get secret $KUBECONFIG_SECRET_NAME -o jsonpath="{.data.kubeconfig}" | base64 --decode)
  
      #       # Print kubeconfig to the output
      #       echo "::set-output name=kubeconfig::$KUBECONFIG"
  
      #       # Print kubeconfig file content (for demonstration purposes)
      #       cat <<< "$KUBECONFIG"
  
      # - name: Send Kubeconfig via Email
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #         server_address: smtp.example.com
      #         server_port: 587
      #         username: ${{ secrets.EMAIL_USERNAME }}
      #         password: ${{ secrets.EMAIL_PASSWORD }}
      #         subject: "AKS Kubeconfig"
      #         from: your@email.com
      #         to: ${{ github.actor }}@usersemail.com
      #         message: |
      #           Here is your AKS cluster kubeconfig:
          
      #           ${{ steps.read-kubeconfig.outputs.kubeconfig }}
          
